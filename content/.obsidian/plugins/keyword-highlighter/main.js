/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/keyword-highlighter-plugin.ts
var import_obsidian2 = require("obsidian");

// src/editor-extension/highlight-mark.ts
var import_view = require("@codemirror/view");
var highlightMark = (keyword) => import_view.Decoration.mark({
  class: "kh-highlighted",
  attributes: {
    style: `--kh-c: ${keyword.color}; --kh-bgc: ${keyword.backgroundColor}`
  }
});

// src/editor-extension/editor-highlighter.ts
var import_search = require("@codemirror/search");
var import_state = require("@codemirror/state");
var import_view2 = require("@codemirror/view");
var EditorHighlighter = class {
  constructor(view) {
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged) {
      this.decorations = this.buildDecorations(update.view);
    }
  }
  buildDecorations(view) {
    const builder = new import_state.RangeSetBuilder();
    const newDecorations = [];
    KeywordHighlighterPlugin.settings.keywords.forEach(
      (k) => newDecorations.push(...this.buildDecorationsForKeyword(view, k))
    );
    newDecorations.sort((a, b) => a.from - b.from);
    newDecorations.forEach((d) => builder.add(d.from, d.to, d.decoration));
    return builder.finish();
  }
  buildDecorationsForKeyword(view, keyword) {
    const newDecorations = [];
    // const cursor = new import_search.SearchCursor(view.state.doc, `${keyword.keyword}:`);
    const cursor = new import_search.SearchCursor(view.state.doc, `${keyword.keyword}`);
    cursor.next();
    while (!cursor.done) {
      newDecorations.push({
        from: cursor.value.from,
        to: cursor.value.to,
        decoration: highlightMark(keyword)
      });
      cursor.next();
    }
    return newDecorations;
  }
};
var editorHighlighter = import_view2.ViewPlugin.fromClass(EditorHighlighter, {
  decorations: (value) => value.decorations
});

// src/setting-tab.ts
var import_obsidian = require("obsidian");
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const keywordContainer = containerEl.createDiv();
    main_default.settings.keywords.forEach((k, i) => {
      this.createKeywordSetting(k, i, keywordContainer);
    });
    new import_obsidian.Setting(containerEl).addButton(
      (button) => button.setButtonText("Add new keyword").onClick(() => {
        main_default.settings.keywords.push({
          keyword: "",
          color: "",
          backgroundColor: ""
        });
        const newKeyword = main_default.settings.keywords.last();
        this.createKeywordSetting(
          newKeyword,
          main_default.settings.keywords.length - 1,
          keywordContainer
        );
      })
    );
  }
  createKeywordSetting(keyword, index, container) {
    new import_obsidian.Setting(container).setName(`Keyword #${index}`).setDesc(
      "Enter a keyword to highlight, a font color and a background color)"
    ).addText(
      (text) => text.setValue(keyword.keyword).onChange(async (value) => {
        keyword.keyword = value;
      })
    ).addColorPicker(
      (cp) => cp.setValue(keyword.color).onChange(async (value) => {
        keyword.color = value;
      })
    ).addColorPicker(
      (cp) => cp.setValue(keyword.backgroundColor).onChange(async (value) => {
        keyword.backgroundColor = value;
      })
    ).addExtraButton(
      (button) => button.setIcon("minus-with-circle").setTooltip("Remove keyword").onClick(async () => {
        const i = main_default.settings.keywords.indexOf(keyword);
        if (i > -1) {
          main_default.settings.keywords.splice(i, 1);
          const settingEl = container.getElementsByClassName("setting-item")[i];
          container.removeChild(settingEl);
        }
      })
    );
  }
  async hide() {
    main_default.settings.keywords = main_default.settings.keywords.filter(
      (k) => k.keyword && k.keyword.match(/^ *$/) === null
    );
    await this.plugin.saveSettings();
  }
};

// src/reader-extension/reader-highlighter.ts
var readerHighlighter = (el) => {
  main_default.settings.keywords.forEach((keyword) => {
    const regex = new RegExp(`(${keyword.keyword})`, "g");
    el.innerHTML = el.innerHTML.replace(
      regex,
      `<span class="kh-highlighted" style="--kh-c: ${keyword.color}; --kh-bgc: ${keyword.backgroundColor}">$1</span>`
    );
  });
};

// src/keyword-highlighter-plugin.ts
var DEFAULT_SETTINGS = {
  keywords: [
    {
      keyword: "TODO",
      color: "#000",
      backgroundColor: "#A9CCE3"
    },
    {
      keyword: "ADD",
      color: "#000",
      backgroundColor: "#8DE3C2"
    },
    {
      keyword: "FIXME",
      color: "#000",
      backgroundColor: "#BAA2E8"
    }
  ]
};
var KeywordHighlighterPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEditorExtension(editorHighlighter);
    this.registerMarkdownPostProcessor(readerHighlighter);
    this.addSettingTab(new SettingTab(this.app, this));
  }
  async loadSettings() {
    KeywordHighlighterPlugin.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
    this.refreshMarkdownView();
  }
  async saveSettings() {
    await this.saveData(KeywordHighlighterPlugin.settings);
    this.refreshMarkdownView();
  }
  refreshMarkdownView() {
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    markdownView == null ? void 0 : markdownView.previewMode.rerender(true);
    const editorView = markdownView == null ? void 0 : markdownView.editor.cm;
    if (editorView) {
      editorView.setState(editorView.state);
    }
  }
};

// main.ts
var main_default = KeywordHighlighterPlugin;
